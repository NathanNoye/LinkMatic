/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LinkifyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var { Modal } = require("obsidian");
var PluginSettings = class {
  constructor() {
    this.configurations = [];
  }
};
var KeywordLinkerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Keyword Linker Settings" });
    this.plugin.settings.configurations.forEach(
      (config, index) => {
        const setting = new import_obsidian.Setting(containerEl);
        setting.addText(
          (text) => text.setPlaceholder("Keyword").setValue(config.keyword).onChange(async (value) => {
            this.plugin.settings.configurations[index].keyword = value;
            await this.plugin.saveSettings();
          })
        );
        setting.addText(
          (text) => text.setPlaceholder("Display Word").setValue(config.displayWord).onChange(async (value) => {
            this.plugin.settings.configurations[index].displayWord = value;
            await this.plugin.saveSettings();
          })
        );
        setting.addText(
          (text) => text.setPlaceholder("Folder").setValue(config.folder).onChange(async (value) => {
            this.plugin.settings.configurations[index].folder = value;
            await this.plugin.saveSettings();
          })
        );
        setting.addButton(
          (button) => button.setButtonText("Remove").onClick(async () => {
            this.plugin.settings.configurations.splice(index, 1);
            await this.plugin.saveSettings();
            this.display();
          })
        );
      }
    );
    new import_obsidian.Setting(containerEl).addButton(
      (button) => button.setButtonText("Add Keyword").onClick(async () => {
        this.plugin.settings.configurations.push({
          keyword: "",
          displayWord: "",
          folder: ""
        });
        await this.plugin.saveSettings();
        this.display();
      })
    );
  }
};
var LinkifyPlugin = class extends import_obsidian.Plugin {
  async loadSettings() {
    const loadedSettings = await this.loadData();
    this.settings = Object.assign(new PluginSettings(), loadedSettings);
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async linkKeywords() {
    for (const config of this.settings.configurations) {
      const files = await this.getFilesInFolder(config.folder);
      for (const file of files) {
        const content = await this.app.vault.read(file);
        const newContent = this.replaceKeywords(
          content,
          config.keyword,
          config.displayWord
        );
        if (newContent !== content) {
          await this.app.vault.modify(file, newContent);
        }
      }
    }
  }
  async getFilesInFolder(folderPath) {
    if (!folderPath) {
      return this.app.vault.getMarkdownFiles();
    }
    const folder = this.app.vault.getAbstractFileByPath(folderPath);
    return this.app.vault.getMarkdownFiles().filter((file) => file.path.startsWith(folder.path));
  }
  replaceKeywords(content, keyword, displayWord) {
    const regex = new RegExp(`\\b${keyword}\\b(?![^\\[]*?\\]\\])`, "g");
    return content.replace(regex, `[[${displayWord}|${keyword}]]`);
  }
  showWarning() {
    const modal = new WarningModal(
      this.app,
      "This will make changes to your MD files",
      "Are you sure you want to proceed?",
      () => {
        this.linkKeywords();
      }
    );
    modal.open();
  }
  async onload() {
    this.settings = new PluginSettings();
    await this.loadSettings();
    this.addSettingTab(new KeywordLinkerSettingTab(this.app, this));
    this.addRibbonIcon("link", "Link Keywords", () => {
      this.showWarning();
    });
  }
};
var WarningModal = class extends Modal {
  constructor(app, message, title, onConfirm) {
    super(app);
    this.message = message;
    this.title = title;
    this.onConfirm = onConfirm;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.style.display = "flex";
    contentEl.style.flexDirection = "column";
    contentEl.style.alignItems = "center";
    contentEl.style.justifyContent = "center";
    contentEl.createEl("h2", { text: this.title });
    const messageEl = contentEl.createEl("p", { text: this.message });
    messageEl.style.textAlign = "center";
    messageEl.style.marginTop = "0px";
    messageEl.style.marginBottom = "30px";
    const buttonsDiv = contentEl.createEl("div");
    buttonsDiv.style.display = "flex";
    buttonsDiv.style.justifyContent = "center";
    buttonsDiv.style.width = "100%";
    buttonsDiv.style.marginTop = "20px";
    const confirmButton = buttonsDiv.createEl("button", {
      text: "Confirm"
    });
    confirmButton.classList.add("mod-cta");
    confirmButton.style.marginRight = "40px";
    const cancelButton = buttonsDiv.createEl("button", { text: "Cancel" });
    cancelButton.onclick = () => this.close();
    confirmButton.onclick = () => {
      this.onConfirm();
      this.close();
    };
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
